{"version":3,"sources":["redux/actions/updateArray.js","algorithms/helpers/randomizer.js","redux/reducers/array/index.js","redux/reducers/bubbleSort/index.js","algorithms/helpers/defaults.js","redux/actions/bubbleSort/index.js","redux/reducers/rootReducer.js","redux/store.js","algorithms/sortingAlgos/bubbleSort.js","components/ControlWindow.jsx","components/DisplayWindow.jsx","components/MainComponent.jsx","index.js"],"names":["updateArray","payload","type","randomizer","length","Array","fill","map","element","Math","floor","random","defaultState","arr","arrayReducer","state","action","compareCandle","compareCandleOk","compareCandleNotOk","sortedCandle","bubbleReducer","Object","assign","rootReducer","combineReducers","store","createStore","delay","delayInms","Promise","resolve","setTimeout","bubbleSort","array","dispatch","a","newArr","console","log","i","no_swap","j","e","ControlWindow","props","len","speed","randomizeHandler","bind","arrayLengthHandler","sortClickHandler","this","updateArr","event","newLength","Number","target","value","setState","sort","className","min","max","defaultValue","onChange","onClick","Component","connect","DisplayWindow","color","indx","candleArr","s","height","width","backgroundColor","style","key","MainComponent","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fc495d2.chunk.js","sourcesContent":["export const UPDATE_ARR = \"UPDATE_ARR\";\n\nexport const updateArray = (payload) => {\n    return {\n        type: UPDATE_ARR,\n        payload: payload,\n    };\n};\n","const randomizer = (length) => {\n    var arr = new Array(length).fill(0);\n    return arr.map((element) => {\n        return Math.floor(Math.random() * 500) + 50;\n    });\n};\n\nexport default randomizer;\n","import { UPDATE_ARR } from \"./../../actions/updateArray\";\nimport randomizer from \"./../../../algorithms/helpers/randomizer\";\n\nconst defaultArrayLength = 20;\n\nconst defaultState = {\n    length: defaultArrayLength,\n    arr: randomizer(defaultArrayLength),\n};\n\nconst arrayReducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case UPDATE_ARR:\n            return {\n                arr: action.payload.arr,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default arrayReducer;\n","import {\n    COMPARE_CANDLE,\n    COMPARE_CANDLE_OK,\n    COMPARE_CANDLE_NOT_OK,\n    SORTED_CANDLE,\n} from \"./../../actions/bubbleSort\";\n\nimport { defaultArrayLength } from \"./../../../algorithms/helpers/defaults\";\n\nconst defaultState = {\n    compareCandle: [-1, -1],\n    compareCandleOk: [-1, -1],\n    compareCandleNotOk: [-1, -1],\n    sortedCandle: defaultArrayLength,\n};\n\nconst bubbleReducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case COMPARE_CANDLE: {\n            return Object.assign(state, { compareCandle: action.payload });\n        }\n        case COMPARE_CANDLE_OK: {\n            return Object.assign(state, { compareCandleOk: action.payload });\n        }\n        case COMPARE_CANDLE_NOT_OK: {\n            return Object.assign(state, { compareCandleNotOk: action.payload });\n        }\n        case SORTED_CANDLE: {\n            // -- Dosen't work\n            // return {\n            //     sortedCandle: action.payload,\n            // };\n\n            // -- Solution 1\n            return Object.assign(state, { sortedCandle: action.payload });\n\n            // -- Solution 2\n            // return { ...state, ...{ sortedCandle: action.payload } };\n        }\n        default:\n            return state;\n    }\n};\n\nexport default bubbleReducer;\n","//Default size of the array\nexport const defaultArrayLength = 20;\n","export const COMPARE_CANDLE = \"COMPARE_CANDLE\";\nexport const COMPARE_CANDLE_OK = \"COMPARE_CANDLE_OK\";\nexport const COMPARE_CANDLE_NOT_OK = \"COMPARE_CANDLE_NOT_OK\";\nexport const SORTED_CANDLE = \"SORTED_CANDLE\";\n\nexport const updateCompareCandle = (payload) => {\n    return {\n        type: COMPARE_CANDLE,\n        payload: payload,\n    };\n};\n\nexport const updateCompareCandleOk = (payload) => {\n    return {\n        type: COMPARE_CANDLE_OK,\n        payload: payload,\n    };\n};\n\nexport const updateCompareCandleNotOk = (payload) => {\n    return {\n        type: COMPARE_CANDLE_NOT_OK,\n        payload: payload,\n    };\n};\n\nexport const updateSortedCandle = (payload) => {\n    console.log(\"==\" + payload);\n    return {\n        type: SORTED_CANDLE,\n        payload: payload,\n    };\n};\n","import { combineReducers } from \"redux\";\n\n//Importing reducers\nimport arrayReducer from \"./array\";\nimport bubbleReducer from \"./bubbleSort\";\n\n//Combining reducers\nconst rootReducer = combineReducers({\n    arrayReducer: arrayReducer,\n    bubbleReducer: bubbleReducer,\n});\n\nexport default rootReducer;\n","import { createStore } from \"redux\";\n\n//Importing rootreducer\nimport rootReducer from \"./reducers/rootReducer\";\n\n//Creating store\nconst store = createStore(rootReducer);\n\nexport default store;\n","import { updateArray } from \"./../../redux/actions/updateArray\";\n\n// delayer\nfunction delay(delayInms) {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve(1);\n        }, delayInms);\n    });\n}\n\nconst bubbleSort = async (\n    array,\n    sortedCandle,\n    compareCandle,\n    compareCandleOk,\n    compareCandleNotOk,\n    dispatch\n) => {\n    var newArr = [...array];\n    console.log(\"hello\");\n    console.log(newArr);\n\n    for (let i = 0; i < newArr.length; i++) {\n        var no_swap = true;\n        for (let j = 0; j < newArr.length - i - 1; j++) {\n            compareCandle([j, j + 1]);\n            dispatch(updateArray({ arr: newArr.map((e) => e) }));\n            await delay(10);\n\n            if (newArr[j] > newArr[j + 1]) {\n                compareCandle([-1, -1]);\n                compareCandleNotOk([j, j + 1]);\n                dispatch(updateArray({ arr: newArr.map((e) => e) }));\n                await delay(10);\n\n                no_swap = false;\n                [newArr[j], newArr[j + 1]] = [newArr[j + 1], newArr[j]];\n                dispatch(updateArray({ arr: newArr.map((e) => e) }));\n\n                compareCandleNotOk([-1, -1]);\n            }\n            compareCandle([-1, -1]);\n            compareCandleOk([j, j + 1]);\n            dispatch(updateArray({ arr: newArr.map((e) => e) }));\n            await delay(10);\n            compareCandleOk([-1, -1]);\n        }\n\n        if (no_swap) {\n            sortedCandle(-1);\n            dispatch(updateArray({ arr: newArr.map((e) => e) }));\n            break;\n        } else {\n            sortedCandle(newArr.length - i - 1);\n        }\n    }\n    await delay(1000);\n    sortedCandle(newArr.length);\n    dispatch(updateArray({ arr: newArr.map((e) => e) }));\n    console.log(newArr);\n};\n\nexport default bubbleSort;\n","import React, { Component } from \"react\";\nimport { connect } from 'react-redux'\n\n//Importing Helpers\nimport randomizer from './../algorithms/helpers/randomizer'\n\n\n//Improting sorting Algorithms\nimport bubbleSort from './../algorithms/sortingAlgos/bubbleSort'\n\n\n//Importing actions\nimport { updateArray } from './../redux/actions/updateArray'\n\nimport {\n    updateSortedCandle,\n    updateCompareCandle,\n    updateCompareCandleOk,\n    updateCompareCandleNotOk\n} from \"./../redux/actions/bubbleSort\"\n\n\nclass ControlWindow extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            len: props.arr.length,\n            speed: 200\n        }\n        this.randomizeHandler = this.randomizeHandler.bind(this);\n        this.arrayLengthHandler = this.arrayLengthHandler.bind(this);\n        this.sortClickHandler = this.sortClickHandler.bind(this);\n    }\n\n    randomizeHandler(){\n        const newArr = randomizer(this.state.len);\n        console.log(newArr);\n        this.props.updateArr(newArr);\n    }\n\n    arrayLengthHandler(event){\n        const newLength = Number(event.target.value);\n        this.setState({\n            len: newLength,\n        });\n        console.log(newLength);\n        this.randomizeHandler();\n\n        //bubbleSort\n        this.props.sortedCandle(newLength);\n    }\n\n    sortClickHandler(){\n        this.props.sort(\n            this.props.arr,\n            this.props.sortedCandle,\n            this.props.compareCandle,\n            this.props.compareCandleOk,\n            this.props.compareCandleNotOk\n        );\n    }\n\n    render() {\n        return (\n            <div className='ControlWindow'>\n                <input \n                    className='inputs'\n                    type='range' \n                    min='10' \n                    max='50' \n                    defaultValue='20' \n                    onChange={this.arrayLengthHandler}\n                    onClick={this.arrayLengthHandler}\n                ></input>\n                <input \n                className='inputs'\n                    type='range' \n                    min='10' \n                    max='50' \n                    defaultValue='20' \n                    onChange={this.arrayLengthHandler}\n                    onClick={this.arrayLengthHandler}\n                ></input>\n                <button \n                    className='btn btn-outline-dark' \n                    onClick={this.randomizeHandler}\n                >Randomize</button>\n                <button \n                    className='btn btn-outline-dark' \n                    onClick={this.sortClickHandler}\n                >Sort</button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        arr: state.arrayReducer.arr,\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        updateArr : (newArr) => {\n            dispatch(updateArray({arr:newArr}));\n        },\n\n        sort : (array,\n                sortedCandle,\n                compareCandle,\n                compareCandleOk,\n                compareCandleNotOk\n            ) => {\n            bubbleSort(array, \n                sortedCandle,\n                compareCandle,\n                compareCandleOk,\n                compareCandleNotOk,\n                dispatch\n            );\n        },\n\n        //bubbleSort\n        sortedCandle : (value) => {\n            dispatch(updateSortedCandle(value));\n        },\n        compareCandle : (value) => {\n            dispatch(updateCompareCandle(value));\n        },\n        compareCandleOk : (value) => {\n            dispatch(updateCompareCandleOk(value));\n        },\n        compareCandleNotOk : (value) => {\n            dispatch(updateCompareCandleNotOk(value));\n        }\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(ControlWindow);","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nclass DisplayWindow extends Component {\n    constructor(props){\n        super(props);\n\n        this.color = this.color.bind(this);\n    }\n\n    color(indx) {\n        // Set Colors\n        if (indx >= this.props.sortedCandle) {\n            return \"blue\";\n        } else if (\n            indx === this.props.compareCandleNotOk[0] ||\n            indx === this.props.compareCandleNotOk[1]\n        ) {\n            return \"red\";\n        } else if (indx === this.props.compareCandleOk[0] || indx === this.props.compareCandleOk[1]) {\n            return \"green\";\n        } else if (indx === this.props.compareCandle[0] || indx === this.props.compareCandle[1]) {\n            return \"DodgerBlue\";\n        } else return \"DarkSlateGray\";\n    }\n\n    render() {\n        const candleArr = this.props.arr.map((element,indx)=>{\n            const s = {\n                height: `${element}px`,\n                width: `${500 / this.props.arr.length}px`,\n                backgroundColor: `${this.color(indx)}`,\n            }\n            return (\n                <div className='candle' style={s} key={indx}></div>\n            )\n        })\n        return (\n            <div className=\"DisplayWindow\">\n                <div className='candles'>\n                    {candleArr}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        arr: state.arrayReducer.arr,\n\n        //bubbleSort\n        compareCandle: state.bubbleReducer.compareCandle,\n        compareCandleOk: state.bubbleReducer.compareCandleOk,\n        compareCandleNotOk: state.bubbleReducer.compareCandleNotOk,\n        sortedCandle: state.bubbleReducer.sortedCandle,\n    }\n}\n\nexport default connect(mapStateToProps,null)(DisplayWindow);","import React, { Component } from \"react\";\n\n//Importing all components\nimport ControlWindow from './ControlWindow';\nimport DisplayWindow from './DisplayWindow';\n\nexport default class MainComponent extends Component{\n    render(){\n        return (\n            <div>\n                <ControlWindow/>\n                <DisplayWindow/>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\n\n//Importing css\nimport \"./styles/App.css\";\n\n//Importing store\nimport store from \"./redux/store\";\n\n//Importing Main Component\nimport MainComponent from \"./components/MainComponent\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <MainComponent />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}