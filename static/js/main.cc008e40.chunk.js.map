{"version":3,"sources":["components/DisplayWindow.js","App.js","serviceWorker.js","index.js"],"names":["DisplayWindow","temp","Array","index","length","Math","floor","random","useState","delay_time","setDelayTime","len","setLength","values","setValues","compareCandle","setCompareCandle","compareCandleOk","setCandleOk","compareCandleNotOk","setCandleNotOk","sortedCandle","setSortedCandle","randomizeValues","temp2","Number","map","x","swapValues","i","j","delay","delayInms","Promise","resolve","setTimeout","bubbleSort_timed","a","no_swap","color","indx","className","type","min","max","defaultValue","onChange","e","target","value","onClick","key","style","height","backgroundColor","width","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gQAyJeA,EAvJO,WAGlB,IAFA,IAAMC,EAAO,IAAIC,MAAM,IAEdC,EAAQ,EAAGA,EAAQF,EAAKG,OAAQD,IACrCF,EAAKE,GAASE,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,GAJ5B,MAQWC,mBAAS,KARpB,mBAQjBC,EARiB,KAQLC,EARK,OASCF,mBAAS,IATV,mBASjBG,EATiB,KASZC,EATY,OAUIJ,mBAASP,GAVb,mBAUjBY,EAViB,KAUTC,EAVS,OAWkBN,mBAAS,EAAE,GAAI,IAXjC,mBAWjBO,EAXiB,KAWFC,EAXE,OAYeR,mBAAS,EAAE,GAAI,IAZ9B,mBAYjBS,EAZiB,KAYAC,EAZA,OAaqBV,mBAAS,EAAE,GAAI,IAbpC,mBAajBW,EAbiB,KAaGC,EAbH,OAcgBZ,mBAASK,EAAOT,QAdhC,mBAcjBiB,EAdiB,KAcHC,EAdG,KA2BxB,IAAMC,EAAkB,WAEpB,IADA,IAAMC,EAAQ,IAAItB,MAAMuB,OAAOd,IACtBR,EAAQ,EAAGA,EAAQqB,EAAMpB,OAAQD,IACtCqB,EAAMrB,GAASE,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,GAGrDO,EAAUU,EAAME,KAAI,SAACC,GAAD,OAAOA,OAGzBC,EAAa,SAACC,EAAGC,GAAO,IAAD,EACA,CAACjB,EAAOiB,GAAIjB,EAAOgB,IAA3ChB,EAAOgB,GADiB,KACbhB,EAAOiB,GADM,MAO7B,SAASC,EAAMC,GACX,OAAO,IAAIC,SAAQ,SAACC,GAChBC,YAAW,WACPD,EAAQ,KACTF,MAIX,IAAMI,EAAgB,uCAAG,gCAAAC,EAAA,sDACZR,EAAI,EADQ,YACLA,EAAIhB,EAAOT,QADN,iBAEbkC,GAAU,EACLR,EAAI,EAHI,YAGDA,EAAIjB,EAAOT,OAAS,EAAIyB,GAHvB,wBAIbb,EAAiB,CAACc,EAAGA,EAAI,IAJZ,SAKGC,EAAMtB,GALT,mBAOTI,EAAOiB,GAAKjB,EAAOiB,EAAI,IAPd,wBAQTV,EAAe,CAACU,EAAGA,EAAI,IARd,UASOC,EAAMtB,GATb,eAWTmB,EAAWE,EAAGA,EAAI,GAClBhB,EAAUD,EAAOa,KAAI,SAACC,GAAD,OAAOA,MAC5BW,GAAU,EAbD,eAeblB,EAAe,EAAE,GAAI,IACrBF,EAAY,CAACY,EAAGA,EAAI,IAhBP,UAiBGC,EAAMtB,GAjBT,eAkBbS,EAAY,EAAE,GAAI,IAClBF,EAAiB,EAAE,GAAI,IAnBV,QAG0Bc,IAH1B,8BAqBjBR,EAAgBT,EAAOT,OAASyB,EAAI,GArBnB,UAsBDE,EAAMtB,GAtBL,mBAuBb6B,EAvBa,qDACcT,IADd,8BA2BrBP,EAAgB,GA3BK,UA4BLS,EAAM,KA5BD,eA6BrBT,EAAgBT,EAAOT,QA7BF,4CAAH,qDAgCtB,SAASmC,EAAMC,GAEX,OAAIA,GAAQnB,EACD,OAEPmB,IAASrB,EAAmB,IAC5BqB,IAASrB,EAAmB,GAErB,MACAqB,IAASvB,EAAgB,IAAMuB,IAASvB,EAAgB,GACxD,QACAuB,IAASzB,EAAc,IAAMyB,IAASzB,EAAc,GACpD,aACG,gBAGlB,OACI,yBAAK0B,UAAU,iBACX,yBAAKA,UAAU,iBACX,qCAAW9B,EAAX,KACA,2BACI+B,KAAK,QACLC,IAAI,IACJC,IAAI,MACJC,aAAchC,EAAOT,OACrB0C,SA5FhB,SAAsBC,GAClBzB,EAAgByB,EAAEC,OAAOC,MAAQ,GACjCrC,EAAUmC,EAAEC,OAAOC,OACnB1B,OA2FQ,oCAAUd,GACV,2BACIiC,KAAK,QACLC,IAAI,IACJC,IAAI,OACJC,aAAc,IACdC,SA9FhB,SAAqBC,GAEjBrC,EAAaqC,EAAEC,OAAOC,UA8Fd,4BACIR,UAAU,uBACVS,QAAS3B,GAFb,aAMA,4BACIkB,UAAU,uBACVS,QAASd,GAFb,SAOJ,6BACI,yBAAKK,UAAU,WACV5B,EAAOa,KAAI,SAACuB,EAAOT,GAAR,OACR,yBACIC,UAAU,SACVU,IAAKX,EACLY,MAAO,CACHC,OAAO,GAAD,OAAKJ,EAAL,MACNK,gBAAgB,GAAD,OAAKf,EAAMC,IAE1Be,MAAM,GAAD,OAAK,IAAM1C,EAAOT,OAAlB,gBCjItBoD,MARf,WACI,OACI,yBAAKf,UAAU,OACb,kBAAC,EAAD,QCGUgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cc008e40.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nconst DisplayWindow = () => {\n    const temp = new Array(20);\n\n    for (let index = 0; index < temp.length; index++) {\n        temp[index] = Math.floor(Math.random() * 500) + 50;\n    }\n\n    // States\n    const [delay_time, setDelayTime] = useState(300);\n    const [len, setLength] = useState(20);\n    const [values, setValues] = useState(temp);\n    const [compareCandle, setCompareCandle] = useState([-1, -1]);\n    const [compareCandleOk, setCandleOk] = useState([-1, -1]);\n    const [compareCandleNotOk, setCandleNotOk] = useState([-1, -1]);\n    const [sortedCandle, setSortedCandle] = useState(values.length);\n\n    function changeLength(e) {\n        setSortedCandle(e.target.value + 1);\n        setLength(e.target.value);\n        randomizeValues();\n    }\n\n    function changeSpeed(e) {\n        //max\n        setDelayTime(e.target.value);\n    }\n\n    const randomizeValues = () => {\n        const temp2 = new Array(Number(len));\n        for (let index = 0; index < temp2.length; index++) {\n            temp2[index] = Math.floor(Math.random() * 500) + 50;\n        }\n\n        setValues(temp2.map((x) => x));\n    };\n\n    const swapValues = (i, j) => {\n        [values[i], values[j]] = [values[j], values[i]];\n    };\n\n    var delayer;\n    // var delay_time = 300;\n\n    function delay(delayInms) {\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve(1);\n            }, delayInms);\n        });\n    }\n\n    const bubbleSort_timed = async () => {\n        for (let i = 0; i < values.length; i++) {\n            var no_swap = true;\n            for (let j = 0; j < values.length - 1 - i; j++) {\n                setCompareCandle([j, j + 1]);\n                delayer = await delay(delay_time);\n\n                if (values[j] > values[j + 1]) {\n                    setCandleNotOk([j, j + 1]);\n                    delayer = await delay(delay_time);\n\n                    swapValues(j, j + 1);\n                    setValues(values.map((x) => x));\n                    no_swap = false;\n                }\n                setCandleNotOk([-1, -1]);\n                setCandleOk([j, j + 1]);\n                delayer = await delay(delay_time);\n                setCandleOk([-1, -1]);\n                setCompareCandle([-1, -1]);\n            }\n            setSortedCandle(values.length - i - 1);\n            delayer = await delay(delay_time);\n            if (no_swap) {\n                break;\n            }\n        }\n        setSortedCandle(0);\n        delayer = await delay(1000);\n        setSortedCandle(values.length);\n    };\n\n    function color(indx) {\n        // Set Colors\n        if (indx >= sortedCandle) {\n            return \"blue\";\n        } else if (\n            indx === compareCandleNotOk[0] ||\n            indx === compareCandleNotOk[1]\n        ) {\n            return \"red\";\n        } else if (indx === compareCandleOk[0] || indx === compareCandleOk[1]) {\n            return \"green\";\n        } else if (indx === compareCandle[0] || indx === compareCandle[1]) {\n            return \"DodgerBlue\";\n        } else return \"DarkSlateGray\";\n    }\n\n    return (\n        <div className=\"DisplayWindow\">\n            <div className=\"ControlWindow\">\n                <p>Length {len} </p>\n                <input\n                    type=\"range\"\n                    min=\"5\"\n                    max=\"100\"\n                    defaultValue={values.length}\n                    onChange={changeLength}\n                ></input>\n                <p>Delay {delay_time}</p>\n                <input\n                    type=\"range\"\n                    min=\"0\"\n                    max=\"1500\"\n                    defaultValue={300}\n                    onChange={changeSpeed}\n                ></input>\n                <button\n                    className=\"btn btn-outline-dark\"\n                    onClick={randomizeValues}\n                >\n                    Randomize\n                </button>\n                <button\n                    className=\"btn btn-outline-dark\"\n                    onClick={bubbleSort_timed}\n                >\n                    Sort\n                </button>\n            </div>\n            <div>\n                <div className=\"candles\">\n                    {values.map((value, indx) => (\n                        <div\n                            className=\"candle\"\n                            key={indx}\n                            style={{\n                                height: `${value}px`,\n                                backgroundColor: `${color(indx)}`,\n                                // ${color(indx)}\n                                width: `${500 / values.length}px`,\n                            }}\n                        ></div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default DisplayWindow;\n","import React from \"react\";\nimport \"./App.css\";\n\n//Importing componenets\nimport DisplayWindow from \"./components/DisplayWindow\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n          <DisplayWindow />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}