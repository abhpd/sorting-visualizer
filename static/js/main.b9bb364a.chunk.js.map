{"version":3,"sources":["redux/actions/updateArray.js","algorithms/helpers/randomizer.js","redux/reducers/array/index.js","redux/actions/updateRunning.js","redux/actions/updateAlgo.js","algorithms/helpers/defaults.js","redux/reducers/delay/index.js","redux/actions/delay.js","redux/reducers/bubbleSort/index.js","redux/actions/bubbleSort/index.js","redux/reducers/selectionSort/index.js","redux/actions/selectionSort/index.js","redux/reducers/rootReducer.js","redux/store.js","algorithms/helpers/delayer.js","algorithms/sortingAlgos/bubbleSort.js","redux/dispatchers/bubbleSortDispatcher.js","algorithms/sortingAlgos/selectionSort.js","redux/dispatchers/selectionSortDispatcher.js","algorithms/sortingAlgos/insertionSort.js","redux/dispatchers/insertionSortDispatcher.js","redux/actions/insertionSort/index.js","components/ControlWindow.jsx","components/DisplayWindow.jsx","components/MainComponent.jsx","index.js"],"names":["updateArray","payload","type","randomizer","length","Array","fill","map","element","Math","floor","random","defaultState","arr","isAlgoRunning","currentAlgo","arrayReducer","state","action","console","log","defaultDelay","Number","delayReducer","compareCandle","compareCandleOk","compareCandleNotOk","sortedCandle","bubbleReducer","Object","assign","selectionReducer","rootReducer","combineReducers","store","createStore","delay","delayInms","Promise","resolve","setTimeout","bubbleSort","updateRunning","delay_time","array","dispatch","a","newArr","i","no_swap","j","e","bubbleSortDispatcher","value","selectionSort","min_indx","temp","selectionSortDispatcher","insertionSort","insertionSortDispatcher","ControlWindow","props","len","randomizeHandler","bind","arrayLengthHandler","sortClickHandler","delayHandler","handleAlgoSelect","this","updateArr","event","newLength","target","setState","newDelay","updateDelay","updateAlgo","runBubbleSort","runSelectionSort","runInsertionSort","className","min","max","defaultValue","onChange","onClick","disabled","name","selected","hidden","Component","connect","algo","DisplayWindow","color","indx","candleArr","s","height","width","backgroundColor","style","key","MainComponent","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b9bb364a.chunk.js","sourcesContent":["export const UPDATE_ARR = \"UPDATE_ARR\";\n\nexport const updateArray = (payload) => {\n    return {\n        type: UPDATE_ARR,\n        payload: payload,\n    };\n};\n","const randomizer = (length) => {\n    var arr = new Array(length).fill(0);\n    return arr.map((element) => {\n        return Math.floor(Math.random() * 500) + 50;\n    });\n};\n\nexport default randomizer;\n","import { UPDATE_ARR } from \"./../../actions/updateArray\";\nimport { UPDATE_RUNNING } from \"../../actions/updateRunning\";\nimport { UPDATE_ALGO } from \"../../actions/updateAlgo\";\nimport randomizer from \"./../../../algorithms/helpers/randomizer\";\n\nconst defaultArrayLength = 20;\n\nconst defaultState = {\n    length: defaultArrayLength,\n    arr: randomizer(defaultArrayLength),\n    isAlgoRunning: false,\n    currentAlgo: \"none\",\n};\n\nconst arrayReducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case UPDATE_ARR:\n            return {\n                ...state,\n                arr: action.payload.arr,\n            };\n        case UPDATE_RUNNING:\n            console.log(action.payload);\n            return {\n                ...state,\n                isAlgoRunning: action.payload,\n            };\n        case UPDATE_ALGO:\n            return {\n                ...state,\n                currentAlgo: action.payload,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default arrayReducer;\n","export const UPDATE_RUNNING = \"UPDATE_RUNNING\";\n\nexport const updateRunning = (payload) => {\n    return {\n        type: UPDATE_RUNNING,\n        payload: payload,\n    };\n};\n","export const UPDATE_ALGO = \"UPDATE_ALGO\";\n\nexport const updateAlgo = (payload) => {\n    return {\n        type: UPDATE_ALGO,\n        payload: payload,\n    };\n};\n","//Default size of the array\nexport const defaultArrayLength = 20;\n\n//Default delay\nexport const defaultDelay = Number(400);\n","import { DELAY } from \"./../../actions/delay\";\nimport { defaultDelay } from \"./../../../algorithms/helpers/defaults\";\n\nconst delayReducer = (state = defaultDelay, action) => {\n    switch (action.type) {\n        case DELAY:\n            return action.payload;\n        default:\n            return state;\n    }\n};\n\nexport default delayReducer;\n","export const DELAY = \"DELAY\";\n\nexport const updateDelay = (payload) => {\n    return {\n        type: DELAY,\n        payload: payload,\n    };\n};\n","import {\n    COMPARE_CANDLE,\n    COMPARE_CANDLE_OK,\n    COMPARE_CANDLE_NOT_OK,\n    SORTED_CANDLE,\n} from \"./../../actions/bubbleSort\";\n\nimport { defaultArrayLength } from \"./../../../algorithms/helpers/defaults\";\n\nconst defaultState = {\n    compareCandle: [-1, -1],\n    compareCandleOk: [-1, -1],\n    compareCandleNotOk: [-1, -1],\n    sortedCandle: defaultArrayLength,\n};\n\nconst bubbleReducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case COMPARE_CANDLE: {\n            return Object.assign(state, { compareCandle: action.payload });\n        }\n        case COMPARE_CANDLE_OK: {\n            return Object.assign(state, { compareCandleOk: action.payload });\n        }\n        case COMPARE_CANDLE_NOT_OK: {\n            return Object.assign(state, { compareCandleNotOk: action.payload });\n        }\n        case SORTED_CANDLE: {\n            // -- Dosen't work\n            // return {\n            //     sortedCandle: action.payload,\n            // };\n\n            // -- Solution 1\n            return Object.assign(state, { sortedCandle: action.payload });\n\n            // -- Solution 2\n            // return { ...state, ...{ sortedCandle: action.payload } };\n        }\n        default:\n            return state;\n    }\n};\n\nexport default bubbleReducer;\n","export const COMPARE_CANDLE = \"COMPARE_CANDLE\";\nexport const COMPARE_CANDLE_OK = \"COMPARE_CANDLE_OK\";\nexport const COMPARE_CANDLE_NOT_OK = \"COMPARE_CANDLE_NOT_OK\";\nexport const SORTED_CANDLE = \"SORTED_CANDLE\";\n\nexport const updateCompareCandle = (payload) => {\n    return {\n        type: COMPARE_CANDLE,\n        payload: payload,\n    };\n};\n\nexport const updateCompareCandleOk = (payload) => {\n    return {\n        type: COMPARE_CANDLE_OK,\n        payload: payload,\n    };\n};\n\nexport const updateCompareCandleNotOk = (payload) => {\n    return {\n        type: COMPARE_CANDLE_NOT_OK,\n        payload: payload,\n    };\n};\n\nexport const updateSortedCandle = (payload) => {\n    console.log(\"==\" + payload);\n    return {\n        type: SORTED_CANDLE,\n        payload: payload,\n    };\n};\n","import {\n    COMPARE_CANDLE,\n    COMPARE_CANDLE_OK,\n    COMPARE_CANDLE_NOT_OK,\n    SORTED_CANDLE,\n} from \"./../../actions/selectionSort\";\n\nconst defaultState = {\n    compareCandle: [-1, -1],\n    compareCandleOk: [-1, -1],\n    compareCandleNotOk: [-1, -1],\n    sortedCandle: -1,\n};\n\nconst selectionReducer = (state = defaultState, action) => {\n    switch (action.type) {\n        case COMPARE_CANDLE: {\n            return Object.assign(state, { compareCandle: action.payload });\n        }\n        case COMPARE_CANDLE_OK: {\n            return Object.assign(state, { compareCandleOk: action.payload });\n        }\n        case COMPARE_CANDLE_NOT_OK: {\n            return Object.assign(state, { compareCandleNotOk: action.payload });\n        }\n        case SORTED_CANDLE: {\n            // -- Dosen't work\n            // return {\n            //     sortedCandle: action.payload,\n            // };\n\n            // -- Solution 1\n            return Object.assign(state, { sortedCandle: action.payload });\n\n            // -- Solution 2\n            // return { ...state, ...{ sortedCandle: action.payload } };\n        }\n        default:\n            return state;\n    }\n};\n\nexport default selectionReducer;\n","export const COMPARE_CANDLE = \"COMPARE_CANDLE\";\nexport const COMPARE_CANDLE_OK = \"COMPARE_CANDLE_OK\";\nexport const COMPARE_CANDLE_NOT_OK = \"COMPARE_CANDLE_NOT_OK\";\nexport const SORTED_CANDLE = \"SORTED_CANDLE\";\n\nexport const updateCompareCandle = (payload) => {\n    return {\n        type: COMPARE_CANDLE,\n        payload: payload,\n    };\n};\n\nexport const updateCompareCandleOk = (payload) => {\n    return {\n        type: COMPARE_CANDLE_OK,\n        payload: payload,\n    };\n};\n\nexport const updateCompareCandleNotOk = (payload) => {\n    return {\n        type: COMPARE_CANDLE_NOT_OK,\n        payload: payload,\n    };\n};\n\nexport const updateSortedCandle = (payload) => {\n    console.log(\"==\" + payload);\n    return {\n        type: SORTED_CANDLE,\n        payload: payload,\n    };\n};\n","import { combineReducers } from \"redux\";\n\n//Importing reducers\nimport arrayReducer from \"./array\";\nimport delayReducer from \"./delay\";\nimport bubbleReducer from \"./bubbleSort\";\nimport selectionReducer from \"./selectionSort\";\n\n//Combining reducers\nconst rootReducer = combineReducers({\n    arrayReducer: arrayReducer,\n    delayReducer: delayReducer,\n    bubbleReducer: bubbleReducer,\n    selectionReducer: selectionReducer,\n});\n\nexport default rootReducer;\n","import { createStore } from \"redux\";\n\n//Importing rootreducer\nimport rootReducer from \"./reducers/rootReducer\";\n\n//Creating store\nconst store = createStore(rootReducer);\n\nexport default store;\n","export function delay(delayInms) {\n    return new Promise((resolve) => {\n        setTimeout(() => {\n            resolve(1);\n        }, delayInms);\n    });\n}\n","import { updateArray } from \"./../../redux/actions/updateArray\";\nimport { delay } from \"./../helpers/delayer\";\n\nconst bubbleSort = async (\n    updateRunning,\n    delay_time,\n    array,\n    dispatch,\n    sortedCandle,\n    compareCandle,\n    compareCandleOk,\n    compareCandleNotOk\n) => {\n    updateRunning(true);\n\n    var newArr = [...array];\n    console.log(\"bubbleSort\");\n    console.log(newArr);\n\n    for (let i = 0; i < newArr.length; i++) {\n        var no_swap = true;\n        for (let j = 0; j < newArr.length - i - 1; j++) {\n            compareCandle([j, j + 1]);\n            dispatch(updateArray({ arr: newArr.map((e) => e) }));\n            await delay(delay_time);\n\n            if (newArr[j] > newArr[j + 1]) {\n                compareCandle([-1, -1]);\n                compareCandleNotOk([j, j + 1]);\n                dispatch(updateArray({ arr: newArr.map((e) => e) }));\n                await delay(delay_time);\n\n                no_swap = false;\n                [newArr[j], newArr[j + 1]] = [newArr[j + 1], newArr[j]];\n                dispatch(updateArray({ arr: newArr.map((e) => e) }));\n\n                compareCandleNotOk([-1, -1]);\n            }\n            compareCandle([-1, -1]);\n            compareCandleOk([j, j + 1]);\n            dispatch(updateArray({ arr: newArr.map((e) => e) }));\n            await delay(delay_time);\n            compareCandleOk([-1, -1]);\n        }\n\n        if (no_swap) {\n            sortedCandle(-1);\n            dispatch(updateArray({ arr: newArr.map((e) => e) }));\n            break;\n        } else {\n            sortedCandle(newArr.length - i - 1);\n        }\n    }\n    await delay(1000);\n    sortedCandle(newArr.length);\n    dispatch(updateArray({ arr: newArr.map((e) => e) }));\n    console.log(newArr);\n\n    updateRunning(false);\n};\n\nexport default bubbleSort;\n","import {\n    updateSortedCandle,\n    updateCompareCandle,\n    updateCompareCandleOk,\n    updateCompareCandleNotOk,\n} from \"./../actions/bubbleSort\";\n\nexport const bubbleSortDispatcher = (dispatch) => {\n    return {\n        //bubbleSort\n        sortedCandle: (value) => {\n            dispatch(updateSortedCandle(value));\n        },\n        compareCandle: (value) => {\n            dispatch(updateCompareCandle(value));\n        },\n        compareCandleOk: (value) => {\n            dispatch(updateCompareCandleOk(value));\n        },\n        compareCandleNotOk: (value) => {\n            dispatch(updateCompareCandleNotOk(value));\n        },\n    };\n};\n","import { updateArray } from \"./../../redux/actions/updateArray\";\nimport { delay } from \"./../helpers/delayer\";\n\nconst selectionSort = async (\n    updateRunning,\n    delay_time,\n    array,\n    dispatch,\n    sortedCandle,\n    compareCandle,\n    compareCandleOk,\n    compareCandleNotOk\n) => {\n    updateRunning(true);\n\n    var newArr = [...array];\n    console.log(\"selectionSort\");\n    console.log(newArr);\n\n    for (let i = 0; i < newArr.length; i++) {\n        await delay(delay_time);\n        var min_indx = i;\n\n        for (let j = i + 1; j < newArr.length; j++) {\n            await delay(delay_time);\n            compareCandleOk([min_indx, -1]);\n            compareCandle([j, -1]);\n            dispatch(updateArray({ arr: newArr.map((e) => e) }));\n\n            if (newArr[j] < newArr[min_indx]) {\n                await delay(delay_time);\n                compareCandleOk([-1, -1]);\n                compareCandle([-1, -1]);\n                compareCandleNotOk([min_indx, j]);\n\n                dispatch(updateArray({ arr: newArr.map((e) => e) }));\n                await delay(delay_time);\n\n                min_indx = j;\n\n                compareCandleNotOk([-1, -1]);\n                compareCandleOk([min_indx, -1]);\n                dispatch(updateArray({ arr: newArr.map((e) => e) }));\n            }\n        }\n        dispatch(updateArray({ arr: newArr.map((e) => e) }));\n        await delay(delay_time);\n\n        compareCandle([-1, -1]);\n        dispatch(updateArray({ arr: newArr.map((e) => e) }));\n\n        compareCandleNotOk([i, min_indx]);\n        dispatch(updateArray({ arr: newArr.map((e) => e) }));\n        await delay(delay_time);\n\n        const temp = newArr[i];\n        newArr[i] = newArr[min_indx];\n        newArr[min_indx] = temp;\n\n        compareCandleNotOk([-1, -1]);\n        compareCandleOk([i, min_indx]);\n        dispatch(updateArray({ arr: newArr.map((e) => e) }));\n        await delay(delay_time);\n        compareCandleOk([-1, -1]);\n\n        sortedCandle(i);\n        dispatch(updateArray({ arr: newArr.map((e) => e) }));\n    }\n\n    compareCandleOk([-1, -1]);\n    compareCandle([-1, -1]);\n    compareCandleNotOk([-1, -1]);\n\n    await delay(1000);\n    sortedCandle(-1);\n    dispatch(updateArray({ arr: newArr.map((e) => e) }));\n    console.log(newArr);\n\n    updateRunning(false);\n};\n\nexport default selectionSort;\n","import {\n    updateSortedCandle,\n    updateCompareCandle,\n    updateCompareCandleOk,\n    updateCompareCandleNotOk,\n} from \"./../actions/selectionSort\";\n\nexport const selectionSortDispatcher = (dispatch) => {\n    return {\n        sortedCandle: (value) => {\n            dispatch(updateSortedCandle(value));\n        },\n        compareCandle: (value) => {\n            dispatch(updateCompareCandle(value));\n        },\n        compareCandleOk: (value) => {\n            dispatch(updateCompareCandleOk(value));\n        },\n        compareCandleNotOk: (value) => {\n            dispatch(updateCompareCandleNotOk(value));\n        },\n    };\n};\n","import { updateArray } from \"./../../redux/actions/updateArray\";\nimport { delay } from \"./../helpers/delayer\";\n\nconst insertionSort = async (\n    updateRunning,\n    delay_time,\n    array,\n    dispatch,\n    sortedCandle,\n    compareCandle,\n    compareCandleOk,\n    compareCandleNotOk\n) => {\n    updateRunning(true);\n\n    var newArr = [...array];\n    console.log(\"insertionSort\");\n    console.log(newArr);\n\n    sortedCandle(0);\n    dispatch(updateArray({ arr: newArr.map((e) => e) }));\n    await delay(delay_time);\n    for (let i = 1; i < newArr.length; i++) {\n        compareCandle([i, -1]);\n        dispatch(updateArray({ arr: newArr.map((e) => e) }));\n        await delay(delay_time);\n\n        if (newArr[i - 1] > newArr[i]) {\n            compareCandleNotOk([i, -1]);\n            dispatch(updateArray({ arr: newArr.map((e) => e) }));\n            await delay(delay_time);\n\n            let j = i;\n            while (newArr[j - 1] > newArr[j]) {\n                const temp = newArr[j];\n                newArr[j] = newArr[j - 1];\n                newArr[j - 1] = temp;\n\n                sortedCandle(i);\n                compareCandleNotOk([j - 1, -1]);\n                dispatch(updateArray({ arr: newArr.map((e) => e) }));\n                await delay(delay_time);\n\n                j--;\n            }\n            compareCandleNotOk([-1, -1]);\n            compareCandleOk([j, -1]);\n            dispatch(updateArray({ arr: newArr.map((e) => e) }));\n            await delay(delay_time);\n            compareCandleOk([-1, -1]);\n        }\n\n        sortedCandle(i);\n        dispatch(updateArray({ arr: newArr.map((e) => e) }));\n    }\n    compareCandle([-1, -1]);\n    await delay(1000);\n    sortedCandle(-1);\n    dispatch(updateArray({ arr: newArr.map((e) => e) }));\n    console.log(newArr);\n\n    updateRunning(false);\n};\n\nexport default insertionSort;\n","import {\n    updateSortedCandle,\n    updateCompareCandle,\n    updateCompareCandleOk,\n    updateCompareCandleNotOk,\n} from \"./../actions/insertionSort\";\n\nexport const insertionSortDispatcher = (dispatch) => {\n    return {\n        sortedCandle: (value) => {\n            dispatch(updateSortedCandle(value));\n        },\n        compareCandle: (value) => {\n            dispatch(updateCompareCandle(value));\n        },\n        compareCandleOk: (value) => {\n            dispatch(updateCompareCandleOk(value));\n        },\n        compareCandleNotOk: (value) => {\n            dispatch(updateCompareCandleNotOk(value));\n        },\n    };\n};\n","export const COMPARE_CANDLE = \"COMPARE_CANDLE\";\nexport const COMPARE_CANDLE_OK = \"COMPARE_CANDLE_OK\";\nexport const COMPARE_CANDLE_NOT_OK = \"COMPARE_CANDLE_NOT_OK\";\nexport const SORTED_CANDLE = \"SORTED_CANDLE\";\n\nexport const updateCompareCandle = (payload) => {\n    return {\n        type: COMPARE_CANDLE,\n        payload: payload,\n    };\n};\n\nexport const updateCompareCandleOk = (payload) => {\n    return {\n        type: COMPARE_CANDLE_OK,\n        payload: payload,\n    };\n};\n\nexport const updateCompareCandleNotOk = (payload) => {\n    return {\n        type: COMPARE_CANDLE_NOT_OK,\n        payload: payload,\n    };\n};\n\nexport const updateSortedCandle = (payload) => {\n    console.log(\"==\" + payload);\n    return {\n        type: SORTED_CANDLE,\n        payload: payload,\n    };\n};\n","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\n\n//Importing Helpers\nimport randomizer from './../algorithms/helpers/randomizer';\n\n\n//Improting sorting Algorithms\nimport bubbleSort from './../algorithms/sortingAlgos/bubbleSort';\nimport { bubbleSortDispatcher } from \"./../redux/dispatchers/bubbleSortDispatcher\";\n\nimport selectionSort from './../algorithms/sortingAlgos/selectionSort';\nimport { selectionSortDispatcher } from \"./../redux/dispatchers/selectionSortDispatcher\";\n\nimport insertionSort from './../algorithms/sortingAlgos/insertionSort';\nimport { insertionSortDispatcher } from \"./../redux/dispatchers/insertionSortDispatcher\";\n\n\n//Importing actions\nimport { updateArray } from './../redux/actions/updateArray';\nimport { updateRunning } from '../redux/actions/updateRunning';\nimport { updateDelay } from './../redux/actions/delay';\nimport { updateAlgo } from './../redux/actions/updateAlgo';\n\n\nclass ControlWindow extends Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            len: props.arr.length,\n        }\n        this.randomizeHandler = this.randomizeHandler.bind(this);\n        this.arrayLengthHandler = this.arrayLengthHandler.bind(this);\n        this.sortClickHandler = this.sortClickHandler.bind(this);\n        this.delayHandler = this.delayHandler.bind(this);\n        this.handleAlgoSelect = this.handleAlgoSelect.bind(this);\n    }\n\n    randomizeHandler(){\n        const newArr = randomizer(this.state.len);\n        console.log(newArr);\n        this.props.updateArr(newArr);\n    }\n\n    arrayLengthHandler(event){\n        const newLength = Number(event.target.value);\n        this.setState({\n            len: newLength,\n        });\n        console.log(newLength);\n        this.randomizeHandler();\n\n        //bubbleSort sorted color hardcode\n        if(this.props.currentAlgo===\"bubbleSort\"){\n            this.props.bubbleSort.sortedCandle(newLength);\n        } else {\n            this.props.selectionSort.sortedCandle(-1);\n        }\n        // this.props.bubbleSort.sortedCandle(newLength);\n    }\n\n    delayHandler(event){\n        console.log(this.props.delay+\"->\");\n        const newDelay = 600 - Number(event.target.value);\n        this.props.updateDelay(newDelay);\n        console.log(this.props.delay);\n    }\n\n    handleAlgoSelect(event){\n        this.props.updateAlgo(event.target.value);\n    }\n\n    async sortClickHandler(){\n        switch(this.props.currentAlgo){\n            case \"bubbleSort\":\n                this.props.runBubbleSort(\n                    this.props.updateRunning,\n                    this.props.delay,\n                    this.props.arr,\n                    this.props.bubbleSort.sortedCandle,\n                    this.props.bubbleSort.compareCandle,\n                    this.props.bubbleSort.compareCandleOk,\n                    this.props.bubbleSort.compareCandleNotOk\n                );\n            break;\n            case \"selectionSort\":\n                this.props.runSelectionSort(\n                    this.props.updateRunning,\n                    this.props.delay,\n                    this.props.arr,\n                    this.props.selectionSort.sortedCandle,\n                    this.props.selectionSort.compareCandle,\n                    this.props.selectionSort.compareCandleOk,\n                    this.props.selectionSort.compareCandleNotOk\n                );\n            break;\n            case \"insertionSort\":\n                this.props.runInsertionSort(\n                    this.props.updateRunning,\n                    this.props.delay,\n                    this.props.arr,\n                    this.props.selectionSort.sortedCandle,\n                    this.props.selectionSort.compareCandle,\n                    this.props.selectionSort.compareCandleOk,\n                    this.props.selectionSort.compareCandleNotOk\n                );\n            break;\n            default:\n                console.log(\"Algo name error\");\n        }\n    }\n\n    render() {\n        return (\n            <div className='ControlWindow'>\n                <h6>Size: {this.props.arr.length}</h6>\n                <input \n                    className='inputs'\n                    type='range' \n                    min='10' \n                    max='50' \n                    defaultValue='20' \n                    onChange={this.arrayLengthHandler}\n                    onClick={this.arrayLengthHandler}\n                    disabled = {this.props.isAlgoRunning}\n                ></input>\n\n                <h6>Speed: {610-Number(this.props.delay)}</h6>\n                <input \n                    className='inputs'\n                    type='range' \n                    min='0' \n                    max='600' \n                    defaultValue={600-Number(this.props.delay)} //since default is delay not speed\n                    onChange={this.delayHandler}\n                    onClick={this.delayHandler}\n                    disabled = {this.props.isAlgoRunning}\n                ></input>\n\n                <button \n                    className='btn btn-outline-dark' \n                    onClick={this.randomizeHandler}\n                    disabled = {this.props.isAlgoRunning}\n                >Randomize</button>\n\n                <select name=\"Algorithm\" disabled={this.props.isAlgoRunning} onChange={this.handleAlgoSelect}>\n                    <option value=\"none\" selected disabled hidden>Choose Algorithm</option>\n                    <option value=\"bubbleSort\">Bubble Sort</option>\n                    <option value=\"selectionSort\">Selection Sort</option>\n                    <option value=\"insertionSort\">Insertion Sort</option>\n                </select>\n\n                <button \n                    className='btn btn-outline-dark' \n                    onClick={this.sortClickHandler}\n                    disabled = {this.props.isAlgoRunning||(this.props.currentAlgo===\"none\")}\n                >Sort</button>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        arr: state.arrayReducer.arr,\n        delay: state.delayReducer,\n        isAlgoRunning: state.arrayReducer.isAlgoRunning,\n        currentAlgo: state.arrayReducer.currentAlgo\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        updateArr : (newArr) => {\n            dispatch(updateArray({arr:newArr}));\n        },\n\n        updateRunning: (payload) => {\n            dispatch(updateRunning(payload));\n        },\n\n        updateDelay : (value) => {\n            dispatch(updateDelay(value));\n        },\n\n        updateAlgo : (algo) => {\n            dispatch(updateAlgo(algo));\n        },\n\n        //Bubble Sort\n        runBubbleSort : (updateRunning, delay, array,\n                sortedCandle,\n                compareCandle,\n                compareCandleOk,\n                compareCandleNotOk\n            ) => {\n            bubbleSort(updateRunning, delay, array, dispatch,\n                sortedCandle,\n                compareCandle,\n                compareCandleOk,\n                compareCandleNotOk\n            );\n        },\n        bubbleSort: bubbleSortDispatcher(dispatch),\n\n        //Selection Sort\n        runSelectionSort : (updateRunning, delay, array,\n                sortedCandle,\n                compareCandle,\n                compareCandleOk,\n                compareCandleNotOk\n            ) => {\n            selectionSort(updateRunning, delay, array, dispatch,\n                sortedCandle,\n                compareCandle,\n                compareCandleOk,\n                compareCandleNotOk\n            );\n        },\n        selectionSort: selectionSortDispatcher(dispatch),\n\n        //Insertion Sort\n        runInsertionSort : (updateRunning, delay, array,\n                sortedCandle,\n                compareCandle,\n                compareCandleOk,\n                compareCandleNotOk\n            ) => {\n            insertionSort(updateRunning, delay, array, dispatch,\n                sortedCandle,\n                compareCandle,\n                compareCandleOk,\n                compareCandleNotOk\n            );\n        },\n        insertionSort: insertionSortDispatcher(dispatch),\n    }\n}\n\nexport default connect(mapStateToProps,mapDispatchToProps)(ControlWindow);","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nclass DisplayWindow extends Component {\n    constructor(props){\n        super(props);\n\n        this.color = this.color.bind(this);\n    }\n\n    color(indx) {\n        switch(this.props.currentAlgo){\n\n            case \"bubbleSort\":\n                if (indx >= this.props.bubbleSort.sortedCandle) {\n                    return \"blue\";\n                } else if (\n                    indx === this.props.bubbleSort.compareCandleNotOk[0] ||\n                    indx === this.props.bubbleSort.compareCandleNotOk[1]\n                ) {\n                    return \"red\";\n                } else if (indx === this.props.bubbleSort.compareCandleOk[0] || indx === this.props.bubbleSort.compareCandleOk[1]) {\n                    return \"green\";\n                } else if (indx === this.props.bubbleSort.compareCandle[0] || indx === this.props.bubbleSort.compareCandle[1]) {\n                    return \"DodgerBlue\";\n                } else return \"DarkSlateGray\";\n            \n            case \"selectionSort\":\n                if (indx <= this.props.selectionSort.sortedCandle) {\n                    return \"blue\";\n                } else if (\n                    indx === this.props.selectionSort.compareCandleNotOk[0] ||\n                    indx === this.props.selectionSort.compareCandleNotOk[1]\n                ) {\n                    return \"red\";\n                } else if (indx === this.props.selectionSort.compareCandleOk[0] || indx === this.props.selectionSort.compareCandleOk[1]) {\n                    return \"green\";\n                } else if (indx === this.props.selectionSort.compareCandle[0] || indx === this.props.selectionSort.compareCandle[1]) {\n                    return \"DodgerBlue\";\n                } else return \"DarkSlateGray\";\n\n            case \"insertionSort\":\n                if (indx === this.props.selectionSort.compareCandleOk[0] || indx === this.props.selectionSort.compareCandleOk[1]) {\n                    return \"green\";\n                } else if (\n                    indx === this.props.selectionSort.compareCandleNotOk[0] ||\n                    indx === this.props.selectionSort.compareCandleNotOk[1]\n                ){\n                    return \"red\";\n                } else if (indx <= this.props.selectionSort.sortedCandle) {\n                    return \"blue\";\n                } else if (indx === this.props.selectionSort.compareCandle[0] || indx === this.props.selectionSort.compareCandle[1]) {\n                    return \"DodgerBlue\";\n                } else return \"DarkSlateGray\";\n\n            default:\n                return \"DarkSlateGray\";\n        }\n    }\n\n    render() {\n        const candleArr = this.props.arr.map((element,indx)=>{\n            const s = {\n                height: `${element}px`,\n                width: `${500 / this.props.arr.length}px`,\n                backgroundColor: `${this.color(indx)}`,\n            }\n            return (\n                <div className='candle' style={s} key={indx}></div>\n            )\n        })\n        return (\n            <div className=\"DisplayWindow\">\n                <div className='candles'>\n                    {candleArr}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        arr: state.arrayReducer.arr,\n        currentAlgo: state.arrayReducer.currentAlgo,\n\n        bubbleSort: {\n            compareCandle: state.bubbleReducer.compareCandle,\n            compareCandleOk: state.bubbleReducer.compareCandleOk,\n            compareCandleNotOk: state.bubbleReducer.compareCandleNotOk,\n            sortedCandle: state.bubbleReducer.sortedCandle,\n        },\n\n        selectionSort: {\n            compareCandle: state.selectionReducer.compareCandle,\n            compareCandleOk: state.selectionReducer.compareCandleOk,\n            compareCandleNotOk: state.selectionReducer.compareCandleNotOk,\n            sortedCandle: state.selectionReducer.sortedCandle,\n        }\n    }\n}\n\nexport default connect(mapStateToProps,null)(DisplayWindow);","import React, { Component } from \"react\";\n\n//Importing all components\nimport ControlWindow from './ControlWindow';\nimport DisplayWindow from './DisplayWindow';\n\nexport default class MainComponent extends Component{\n    render(){\n        return (\n            <div>\n                <ControlWindow/>\n                <DisplayWindow/>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Provider } from \"react-redux\";\n\n//Importing css\nimport \"./styles/App.css\";\n\n//Importing store\nimport store from \"./redux/store\";\n\n//Importing Main Component\nimport MainComponent from \"./components/MainComponent\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <MainComponent />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}